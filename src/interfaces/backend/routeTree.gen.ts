/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TopicsImport } from './routes/topics'
import { Route as ReposImport } from './routes/repos'
import { Route as OwnersImport } from './routes/owners'
import { Route as IndexImport } from './routes/index'
import { Route as ListsIndexImport } from './routes/lists/index'
import { Route as ListsNewImport } from './routes/lists/new'
import { Route as ListsIdImport } from './routes/lists/$id'

// Create/Update Routes

const TopicsRoute = TopicsImport.update({
  id: '/topics',
  path: '/topics',
  getParentRoute: () => rootRoute,
} as any)

const ReposRoute = ReposImport.update({
  id: '/repos',
  path: '/repos',
  getParentRoute: () => rootRoute,
} as any)

const OwnersRoute = OwnersImport.update({
  id: '/owners',
  path: '/owners',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ListsIndexRoute = ListsIndexImport.update({
  id: '/lists/',
  path: '/lists/',
  getParentRoute: () => rootRoute,
} as any)

const ListsNewRoute = ListsNewImport.update({
  id: '/lists/new',
  path: '/lists/new',
  getParentRoute: () => rootRoute,
} as any)

const ListsIdRoute = ListsIdImport.update({
  id: '/lists/$id',
  path: '/lists/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/owners': {
      id: '/owners'
      path: '/owners'
      fullPath: '/owners'
      preLoaderRoute: typeof OwnersImport
      parentRoute: typeof rootRoute
    }
    '/repos': {
      id: '/repos'
      path: '/repos'
      fullPath: '/repos'
      preLoaderRoute: typeof ReposImport
      parentRoute: typeof rootRoute
    }
    '/topics': {
      id: '/topics'
      path: '/topics'
      fullPath: '/topics'
      preLoaderRoute: typeof TopicsImport
      parentRoute: typeof rootRoute
    }
    '/lists/$id': {
      id: '/lists/$id'
      path: '/lists/$id'
      fullPath: '/lists/$id'
      preLoaderRoute: typeof ListsIdImport
      parentRoute: typeof rootRoute
    }
    '/lists/new': {
      id: '/lists/new'
      path: '/lists/new'
      fullPath: '/lists/new'
      preLoaderRoute: typeof ListsNewImport
      parentRoute: typeof rootRoute
    }
    '/lists/': {
      id: '/lists/'
      path: '/lists'
      fullPath: '/lists'
      preLoaderRoute: typeof ListsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/owners': typeof OwnersRoute
  '/repos': typeof ReposRoute
  '/topics': typeof TopicsRoute
  '/lists/$id': typeof ListsIdRoute
  '/lists/new': typeof ListsNewRoute
  '/lists': typeof ListsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/owners': typeof OwnersRoute
  '/repos': typeof ReposRoute
  '/topics': typeof TopicsRoute
  '/lists/$id': typeof ListsIdRoute
  '/lists/new': typeof ListsNewRoute
  '/lists': typeof ListsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/owners': typeof OwnersRoute
  '/repos': typeof ReposRoute
  '/topics': typeof TopicsRoute
  '/lists/$id': typeof ListsIdRoute
  '/lists/new': typeof ListsNewRoute
  '/lists/': typeof ListsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/owners'
    | '/repos'
    | '/topics'
    | '/lists/$id'
    | '/lists/new'
    | '/lists'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/owners'
    | '/repos'
    | '/topics'
    | '/lists/$id'
    | '/lists/new'
    | '/lists'
  id:
    | '__root__'
    | '/'
    | '/owners'
    | '/repos'
    | '/topics'
    | '/lists/$id'
    | '/lists/new'
    | '/lists/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OwnersRoute: typeof OwnersRoute
  ReposRoute: typeof ReposRoute
  TopicsRoute: typeof TopicsRoute
  ListsIdRoute: typeof ListsIdRoute
  ListsNewRoute: typeof ListsNewRoute
  ListsIndexRoute: typeof ListsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OwnersRoute: OwnersRoute,
  ReposRoute: ReposRoute,
  TopicsRoute: TopicsRoute,
  ListsIdRoute: ListsIdRoute,
  ListsNewRoute: ListsNewRoute,
  ListsIndexRoute: ListsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/owners",
        "/repos",
        "/topics",
        "/lists/$id",
        "/lists/new",
        "/lists/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/owners": {
      "filePath": "owners.tsx"
    },
    "/repos": {
      "filePath": "repos.tsx"
    },
    "/topics": {
      "filePath": "topics.tsx"
    },
    "/lists/$id": {
      "filePath": "lists/$id.tsx"
    },
    "/lists/new": {
      "filePath": "lists/new.tsx"
    },
    "/lists/": {
      "filePath": "lists/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
